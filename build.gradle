/*
 *
 *
 *          Copyright (c) 2021. - TinyZ.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
plugins {
    id 'java'
}

ext.pack_version = (hasProperty("pack_version") ? property("pack_version") : version)

group = 'org.structutil'
version = '3.0.14.beta-SNAPSHOT'
description = 'Light Flexible And Generic Struct Data File Loader. Convert Struct Data To Java Bean'

ext.struct_jvm_projects = [
        ':struct-all',
        ':struct-core',
        ':struct-spring',
        ':struct-spring-boot-starter'
]

allprojects {
    apply plugin: 'jacoco'

    ext.version_options = [
            SPRING_BOOT_VERSION: "2.2.5.RELEASE",
            SPRING_VERSION     : "5.2.4.RELEASE",
            JETTY_VERSION      : "9.4.16.v20140903",
            JUNIT_VERSION      : "5.6.2",
            POI_VERSION        : "5.1.0",
            LOG4J2_VERSION     : "2.17.0",
            MOCKITO_VERSION    : "2.2.22"
    ]

    jacoco {
        toolVersion = "0.8.6"
    }

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        maven { url "https://repo1.maven.org/maven2/" }
        maven { url "https://repo.maven.apache.org/maven2/" }
        maven { url "http://repo.typesafe.com/typesafe/repo" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'distribution'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    compileJava.options.setEncoding("UTF-8")
    compileTestJava.options.setEncoding("UTF-8")

    group = "${rootProject.group}"
    version = "${rootProject.version}"

    dependencies {
        //  slf4j
        implementation('org.slf4j:slf4j-api:1.7.30')
        //  junit 5.x and mockito
        testImplementation("org.mockito:mockito-core:3.1.0")
        testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
        //  log4j 2.x
        testImplementation("org.apache.logging.log4j:log4j-api:${version_options.LOG4J2_VERSION}")
        testImplementation("org.apache.logging.log4j:log4j-core:${version_options.LOG4J2_VERSION}")
        testImplementation("org.apache.logging.log4j:log4j-slf4j-impl:${version_options.LOG4J2_VERSION}")
        testImplementation("org.apache.logging.log4j:log4j-jul:${version_options.LOG4J2_VERSION}")
    }

    test {
        ignoreFailures = true
        useJUnitPlatform()
    }

    distTar {
        setArchivesBaseName("${rootProject.name}-all")
        compression = Compression.GZIP
        getArchiveExtension().set('tar.gz')
    }

    distributions {
        main {
            contents {
                from project.tasks.withType(Jar)
            }
        }
    }
}

/// <editor-fold desc="  Code Coverage  ">

ext.codecovProjects = subprojects.findAll {
    return ["struct-core", "struct-spring", "struct-spring-boot-starter"].contains(it.name)
}
configure(codecovProjects) {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.6"
    }
}
task codeCoverageReport(type: JacocoReport) {
    getExecutionData().setFrom(fileTree(dir: project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))

    project.ext.codecovProjects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/report.xml")
        html.enabled true
        html.destination file("${buildDir}/reports/html")
        csv.enabled false
    }

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/bootstrap/**'
                    ])
        }))
    }

    //  jacocoRootReport doesn't work if some subprojects don't have any tests at all because this causes the onlyIf of JacocoReport to be false.
    onlyIf = { true }
}
codeCoverageReport.dependsOn {
    ext.codecovProjects*.test
}
/// </editor-fold>


//  <editor-fold desc="   Maven Publish  Local ">
//  https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:install

Closure init_publish_module = {

    apply plugin: 'maven-publish'

    task generatePomPropertiesFile {
        inputs.properties([
                'version'   : "${-> project.version}",
                'groupId'   : "${-> project.group}",
                'artifactId': "${-> project.name}"
        ])
        outputs.file "$project.buildDir/generatePomPropertiesFile/pom.properties"
        doLast {
            File file = outputs.files.singleFile
            file.parentFile.mkdirs()
            file << inputs.properties.collect { key, value -> "$key: $value" }.join('\n')
        }
    }

    model {
        tasks.jar {
            manifest {
                attributes 'Implementation-Title': project.description ?: rootProject.description,
                        'Implementation-Version': project.version,
                        'Built-By': System.getProperty('user.name'),
                        'Built-Date': new Date(),
                        'Built-JDK': System.getProperty('java.version'),
                        'Built-Gradle': gradle.gradleVersion,
                        'Target-JDK': project.targetCompatibility
            }
            into("META-INF/maven/$project.group/$project.name") {
                from { generatePomFileForMavenPublication }
                rename ".*.xml", "pom.xml"
                from generatePomPropertiesFile
            }
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        archiveClassifier.set('sources')
    }

    task javadocJar(type: Jar) {
        from javadoc {
            options.encoding = 'UTF-8'
            options.tags = ["date"]
            failOnError = false
        }
        archiveClassifier.set('javadoc')
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = "$project.name"
                    description = "$project.description"
                    url = "https://github.com/TinyZzh/StructUtil"
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    developers {
                        developer {
                            id = "TinyZ"
                            name = "TinyZzh"
                            email = "tinyzzh815@gmail.com"
                        }
                    }
                }
            }
        }
        repositories {
            mavenLocal()
            maven {
                name "local_nexus"
                url "http://192.168.0.2:8081/nexus/content/repositories/snapshots"
                credentials {
                    username = 'admin'
                    password = 'admin123'
                }
            }
        }
    }
}
ext.struct_jvm_projects.each {
    project(it, init_publish_module)
}
/// </editor-fold>
